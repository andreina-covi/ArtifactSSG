THERE_BE_DRAGONS_HERE
Warning
31 July 2020 6:12:24.785877 am

VM: Mac OS - x64 - 1013.0 - CoInterpreter * VMMaker-CompatibleUserName.1580983506 uuid: 7aff73cb-5a2e-5002-a356-37de4e762a49 Feb 12 2020
StackToRegisterMappingCogit * VMMaker-CompatibleUserName.1580983506 uuid: 7aff73cb-5a2e-5002-a356-37de4e762a49 Feb 12 2020
VM: 202002121007 https://github.com/pharo-project/opensmalltalk-vm.git Date: Wed Feb 12 11:07:12 2020 CommitHash: 2bd9e39 Plugins: 202002121007 https://github.com/pharo-project/opensmalltalk-vm.git

Image: Pharo9.0.0 [Build information: Pharo-9.0.0+build.330.sha.1570116f51c1b0be9053cd886246dee14b596ca7 (64 Bit)]

IceGitCommit(IceCommitish)>>validateCanMerge
	Receiver: IceGitCommit(27acf16df75dfdedf36a49bd615d38ddaa16d0f8)
	Arguments and temporary variables: 
		imageCommit: 	nil
		headCommit: 	nil
		mergeCommit: 	ni
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		id: 	'27acf16df75dfdedf36a49bd615d38ddaa16d0f8'
		author: 	'Andreina Cota'
		datetime: 	2020-07-31T06:11:44-04:00
		ancestorIds: 	#('607e066bc39ed27691da9c3b2cf596719890eebd')
		comment: 	'comment of evolutionFitness visualization'


IceMerge>>execute
	Receiver: an IceMerge
	Arguments and temporary variables: 
		commitToAdvance: 	ni
	Receiver's instance variables: 
		mergeTree: 	nil
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		mergeCommit: 	IceGitCommit(27acf16df75dfdedf36a49bd615d38ddaa16d0f8)
		imageCommit: 	nil
		changesToWorkingCopyTree: 	nil


IceAttachedSingleVersionWorkingCopy>>mergeCommit:
	Receiver: an IceAttachedSingleVersionWorkingCopy
	Arguments and temporary variables: 
		mergeCommit: 	IceGitCommit(27acf16df75dfdedf36a49bd615d38ddaa16d0f8
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)


IceWorkingCopy>>mergeCommit:
	Receiver: an IceWorkingCopy
	Arguments and temporary variables: 
		aCommit: 	IceGitCommit(27acf16df75dfdedf36a49bd615d38ddaa16d0f8
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		packages: 	a Dictionary('BaselineOfSmallSuiteGenerator'->IcePackage(BaselineOfSm...etc...
		referenceCommit: 	IceGitCommit(607e066bc39ed27691da9c3b2cf596719890eebd)
		shouldIgnoreNotifications: 	false
		project: 	an IceBasicProject
		properties: 	an IceRepositoryProperties


IceGitLocalBranch(IceLocalBranch)>>pullFrom:
	Receiver: IceGitLocalBranch(visualizationForPaper)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/OBJECTSEMANTICS/SmallSuiteGenerator.git)
		remoteBranch: 	IceGitRemoteBranch(origin/visualizationForPaper
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		name: 	'refs/heads/visualizationForPaper'


IceLibgitRepository(IceRepository)>>pullFrom:
	Receiver: IceLibgitRepository(SmallSuiteGenerator)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/OBJECTSEMANTICS/SmallSuiteGenerator.git
	Receiver's instance variables: 
		name: 	'SmallSuiteGenerator'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 88%)
		location: 	{localDirectory}/iceberg/OBJECTSEMANTICS/SmallSuiteGenerator
		commitCache: 	a LRUCache(#30 30/30 [ 1 ] 10%)
		handle: 	a LGitRepository (/Users/leela/Documents/ArtifactSSG/pharo-local/iceber...etc...


[ self entity pullFrom: self remote ] in IceTipPullModel>>pullThen:
	Receiver: an IceTipPullModel
	Arguments and temporary variables: 
		aBlock: 	[ 
		self window delete 
	Receiver's instance variables: 
		entity: 	IceLibgitRepository(SmallSuiteGenerator)
		repositoryModel: 	an IceTipCachedModel(an IceTipRepositoryModel)
		remote: 	origin (https://github.com/OBJECTSEMANTICS/SmallSuiteGenerator.git)


[:bar | bar label: aString. aBlock value] in MorphicUIManager(UIManager)>>informUser:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aString: 	'Pulling from origin'
		aBlock: 	[ self entity pullFrom: self remote ]
		bar: 	a Jo
	Receiver's instance variables: 
		activeTranscript: 	nil


[:bar | aBlock value: bar] in MorphicUIManager>>informUserDuring:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aBlock: 	[:bar | bar label: aString. aBlock value]
		bar: 	a Jo
	Receiver's instance variables: 
		activeTranscript: 	nil


BlockClosure>>cull:
	Receiver: [:bar | aBlock value: bar]
	Arguments and temporary variables: 
		anArg: 	a Jo
	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>informUserDuring:
		startpc: 	58
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
	  CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[:bar | aBlock value: bar]
		currentValue: 	1
		min: 	1
		max: 	100
		title: 	'Pulling from origin'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	ni
	Receiver's instance variables: 
		index: 	2


BlockClosure>>ensure:
	Receiver: [ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ 
			activeProcess
				psValueAt: index
				put: oldValue ]
		complete: 	nil
		returnValue: 	ni
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	ni
	Receiver's instance variables: 
		index: 	2


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
	  CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[:bar | aBlock value: bar]
		currentValue: 	1
		min: 	1
		max: 	100
		title: 	'Pulling from origin'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
	  CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	ni
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[:bar | aBlock value: bar]
		currentValue: 	1
		min: 	1
		max: 	100
		title: 	'Pulling from origin'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


MorphicUIManager(UIManager)>>displayProgress:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	''
		minVal: 	1
		maxVal: 	100
		workBlock: 	[:bar | aBlock value: bar
	Receiver's instance variables: 
		activeTranscript: 	nil


MorphicUIManager>>informUserDuring:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aBlock: 	[:bar | bar label: aString. aBlock value
	Receiver's instance variables: 
		activeTranscript: 	nil


MorphicUIManager(UIManager)>>informUser:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aString: 	'Pulling from origin'
		aBlock: 	[ self entity pullFrom: self remote 
	Receiver's instance variables: 
		activeTranscript: 	nil


IceTipStandardAction>>basicExecute
	Receiver: an IceTipStandardAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		successBlock: 	[ 
		self window delete ]
		message: 	'Pulling from origin'
		successAnnounceBlock: 	[ IceRepositoryModified for: self repository ]
		actionBlock: 	[ self entity pullFrom: self remote ]


[ 
		self basicExecute.
		self finishSuccess ] in IceTipStandardAction(IceTipAction)>>execute
	Receiver: an IceTipStandardAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		successBlock: 	[ 
		self window delete ]
		message: 	'Pulling from origin'
		successAnnounceBlock: 	[ IceRepositoryModified for: self repository ]
		actionBlock: 	[ self entity pullFrom: self remote ]


BlockClosure>>on:do:
	Receiver: [ 
		self basicExecute.
		self finishSuccess ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :e | e acceptError: (IceTipInteractiveErrorVisitor on: self re...etc..
	Receiver's instance variables: 
		outerContext: 	IceTipStandardAction(IceTipAction)>>execute
		startpc: 	54
		numArgs: 	0


IceTipStandardAction(IceTipAction)>>withErrorHandlingDo:
	Receiver: an IceTipStandardAction
	Arguments and temporary variables: 
		aBlock: 	[ 
		self basicExecute.
		self finishSuccess 
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		successBlock: 	[ 
		self window delete ]
		message: 	'Pulling from origin'
		successAnnounceBlock: 	[ IceRepositoryModified for: self repository ]
		actionBlock: 	[ self entity pullFrom: self remote ]


IceTipStandardAction(IceTipAction)>>execute
	Receiver: an IceTipStandardAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		successBlock: 	[ 
		self window delete ]
		message: 	'Pulling from origin'
		successAnnounceBlock: 	[ IceRepositoryModified for: self repository ]
		actionBlock: 	[ self entity pullFrom: self remote ]


IceTipStandardAction>>execute:
	Receiver: an IceTipStandardAction
	Arguments and temporary variables: 
		aBlock: 	[ self entity pullFrom: self remote 
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SmallSuiteGenerator)
		successBlock: 	[ 
		self window delete ]
		message: 	'Pulling from origin'
		successAnnounceBlock: 	[ IceRepositoryModified for: self repository ]
		actionBlock: 	[ self entity pullFrom: self remote ]


IceTipPullModel>>pullThen:
	Receiver: an IceTipPullModel
	Arguments and temporary variables: 
		aBlock: 	[ 
		self window delete 
	Receiver's instance variables: 
		entity: 	IceLibgitRepository(SmallSuiteGenerator)
		repositoryModel: 	an IceTipCachedModel(an IceTipRepositoryModel)
		remote: 	origin (https://github.com/OBJECTSEMANTICS/SmallSuiteGenerator.git)


IceTipCachedModel>>forwardMessage:
	Receiver: an IceTipCachedModel(an IceTipPullModel)
	Arguments and temporary variables: 
		aMessage: 	pullThen: [ 
		self window delete 
	Receiver's instance variables: 
		realObject: 	an IceTipPullModel
		cache: 	an IceTipCache


IceTipCachedModel>>doesNotUnderstand: #pullThen:
	Receiver: an IceTipCachedModel(an IceTipPullModel)
	Arguments and temporary variables: 
		aMessage: 	pullThen: [ 
		self window delete 
	Receiver's instance variables: 
		realObject: 	an IceTipPullModel
		cache: 	an IceTipCache


IceTipPullBrowser>>doPull
	Receiver: an IceTipPullBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipHistoryBrowser an IceTipActionPanel a...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		model: 	an IceTipCachedModel(an IceTipPullModel)
		toolbar: 	an IceTipToolbar
		commitsPanel: 	an IceTipHistoryBrowser
		actionPanel: 	an IceTipActionPanel
		button: 	a ButtonPresenter
		remotePanel: 	an IceTipSelectRemotePresenter


[ self doPull ] in IceTipPullBrowser>>newActionButton
	Receiver: an IceTipPullBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipHistoryBrowser an IceTipActionPanel a...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		model: 	an IceTipCachedModel(an IceTipPullModel)
		toolbar: 	an IceTipToolbar
		commitsPanel: 	an IceTipHistoryBrowser
		actionPanel: 	an IceTipActionPanel
		button: 	a ButtonPresenter
		remotePanel: 	an IceTipSelectRemotePresenter


ButtonPresenter>>performAction
	Receiver: a ButtonPresenter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an IceTipPullBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ 'Pull new commits from origin/visualizationForPap...etc...
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | ] ]
		transferBlock: 	a NewValueHolder[ [:passenger :source | self defaultTransferFor:...etc...
		color: 	a NewValueHolder[ nil ]
		actionHolder: 	a NewValueHolder[ [ self doPull ] ]
		labelHolder: 	a CollectionValueHolder[ 'Pull' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ Form(14x14x32) ]
		menuHolder: 	a NewValueHolder[ a MenuPresenter ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(894316288))
		announcer: 	nil
		model: 	a ButtonPresenter
		widget: 	a PluggableButtonMorph(894316288)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(894316288)
	Arguments and temporary variables: 
		event: 	[(903@709) mouseUp 1919544 nil
	Receiver's instance variables: 
		bounds: 	(871.0@694.0) corner: (971.0@721.0)
		owner: 	a PanelMorph(537682432)
		submorphs: 	an Array(an AlignmentMorph(217712640))
		fullBounds: 	(871@694) corner: (971@721)
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.9012707722385142...etc...
		extension: 	a MorphExtension (889995264) [balloonText]  [eventHandler = a Morphi...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(720064768)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	an IconicListItem(720064768)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(894316288)
	Arguments and temporary variables: 
		evt: 	[(903@709) mouseUp 1919544 nil]
		all: 	an Array(a PluggableButtonMorph(894316288))
		m: 	a PluggableButtonMorph(894316288
	Receiver's instance variables: 
		bounds: 	(871.0@694.0) corner: (971.0@721.0)
		owner: 	a PanelMorph(537682432)
		submorphs: 	an Array(an AlignmentMorph(217712640))
		fullBounds: 	(871@694) corner: (971@721)
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.9012707722385142...etc...
		extension: 	a MorphExtension (889995264) [balloonText]  [eventHandler = a Morphi...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(720064768)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	an IconicListItem(720064768)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(894316288))
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [...etc...
		index: 	
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(894316288))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(894316288)
	Arguments and temporary variables: 
		evt: 	[(903@709) mouseUp 1919544 nil]
		all: 	an Array(a PluggableButtonMorph(894316288)
	Receiver's instance variables: 
		bounds: 	(871.0@694.0) corner: (971.0@721.0)
		owner: 	a PanelMorph(537682432)
		submorphs: 	an Array(an AlignmentMorph(217712640))
		fullBounds: 	(871@694) corner: (971@721)
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.9012707722385142...etc...
		extension: 	a MorphExtension (889995264) [balloonText]  [eventHandler = a Morphi...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(720064768)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	an IconicListItem(720064768)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(894316288)
	Arguments and temporary variables: 
		anEvent: 	[(903@709) mouseUp 1919544 nil]
		result: 	ni
	Receiver's instance variables: 
		bounds: 	(871.0@694.0) corner: (971.0@721.0)
		owner: 	a PanelMorph(537682432)
		submorphs: 	an Array(an AlignmentMorph(217712640))
		fullBounds: 	(871@694) corner: (971@721)
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.9012707722385142...etc...
		extension: 	a MorphExtension (889995264) [balloonText]  [eventHandler = a Morphi...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(720064768)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	an IconicListItem(720064768)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false



--- The full stack ---
IceGitCommit(IceCommitish)>>validateCanMerge
IceMerge>>execute
IceAttachedSingleVersionWorkingCopy>>mergeCommit:
IceWorkingCopy>>mergeCommit:
IceGitLocalBranch(IceLocalBranch)>>pullFrom:
IceLibgitRepository(IceRepository)>>pullFrom:
[ self entity pullFrom: self remote ] in IceTipPullModel>>pullThen:
[:bar | bar label: aString. aBlock value] in MorphicUIManager(UIManager)>>informUser:during:
[:bar | aBlock value: bar] in MorphicUIManager>>informUserDuring:
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
	  CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
	  CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
MorphicUIManager(UIManager)>>displayProgress:from:to:during:
MorphicUIManager>>informUserDuring:
MorphicUIManager(UIManager)>>informUser:during:
IceTipStandardAction>>basicExecute
[ 
		self basicExecute.
		self finishSuccess ] in IceTipStandardAction(IceTipAction)>>execute
BlockClosure>>on:do:
IceTipStandardAction(IceTipAction)>>withErrorHandlingDo:
IceTipStandardAction(IceTipAction)>>execute
IceTipStandardAction>>execute:
IceTipPullModel>>pullThen:
IceTipCachedModel>>forwardMessage:
IceTipCachedModel>>doesNotUnderstand: #pullThen:
IceTipPullBrowser>>doPull
[ self doPull ] in IceTipPullBrowser>>newActionButton
ButtonPresenter>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: 
			(anEvent transformedBy: (focusHolder transformedFrom: self)).
	] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[:h |
		self activeHand: h.
		h processEvents.
		self activeHand: nil.
	] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[
		MorphicRenderLoop new doOneCycleWhile: [ true ]
	] in MorphicUIManager>>spawnNewProcess
[self value.
			Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

